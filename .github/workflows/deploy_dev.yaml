name: Deploy to Development

on:
  push:
    branches:
      - develop
      - dev

  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Docker on EC2 (if needed)
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script: |
          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            echo "🐳 Installing Docker..."
            sudo apt update
            sudo apt install -y ca-certificates curl gnupg lsb-release
            
            # Add Docker's official GPG key
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            
            # Set up the repository
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            
            # Install Docker Engine
            sudo apt update
            sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            
            # Add user to docker group and configure
            sudo usermod -aG docker ubuntu
            sudo systemctl enable docker
            sudo systemctl start docker
            
            echo "✅ Docker installed successfully"
            echo "⚠️  Please reconnect SSH for group changes to take effect"
          else
            echo "✅ Docker already installed"
          fi
          
          # Install Git if not already installed
          if ! command -v git &> /dev/null; then
            echo "📦 Installing Git..."
            sudo apt install git -y
            echo "✅ Git installed successfully"
          else
            echo "✅ Git already installed"
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Dev EC2
      uses: appleboy/ssh-action@v1.0.3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      with:
        host: ${{ secrets.DEV_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,S3_BUCKET_NAME
        script: |
          # Clone repository if it doesn't exist, otherwise pull latest changes
          if [ ! -d "/home/ubuntu/YoloService" ]; then
            echo "📥 Cloning repository..."
            cd /home/ubuntu
            git clone ${{ github.server_url }}/${{ github.repository }}.git YoloService
          else
            echo "📥 Updating repository..."
            cd /home/ubuntu/YoloService
            # Pull latest changes from the pushed branch
            git fetch --all
            git checkout ${{ github.head_ref || github.ref_name }}
            git pull origin ${{ github.head_ref || github.ref_name }}
          fi
          
          cd /home/ubuntu/YoloService
          
          # Create .env file with AWS credentials
          echo "Creating .env file with AWS credentials..."
          cat > .env << EOL
          AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          AWS_REGION=${AWS_REGION}
          S3_BUCKET_NAME=${S3_BUCKET_NAME}
          EOL
          
          # Run deployment script
          chmod +x deploy.sh
          ./deploy.sh
          
          # Verify deployment
          sleep 10
          curl -f http://localhost:8667/health || exit 1
          echo "🚀 Development deployment successful!"