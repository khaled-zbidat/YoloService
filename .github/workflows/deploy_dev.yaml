name: Deploy to Development

on:
  push:
    branches:
      - develop
      - dev
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Docker and OpenTelemetry Collector on EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script: |
          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            echo "üê≥ Installing Docker..."
            sudo apt update
            sudo apt install -y ca-certificates curl gnupg lsb-release
            
            # Add Docker's official GPG key
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            
            # Set up the repository
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            
            # Install Docker Engine
            sudo apt update
            sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            
            # Add user to docker group and configure
            sudo usermod -aG docker ubuntu
            sudo systemctl enable docker
            sudo systemctl start docker
            
            echo "‚úÖ Docker installed successfully"
            echo "‚ö†Ô∏è  Please reconnect SSH for group changes to take effect"
          else
            echo "‚úÖ Docker already installed"
          fi
          
          # Install Git if not already installed
          if ! command -v git &> /dev/null; then
            echo "üì¶ Installing Git..."
            sudo apt install git -y
            echo "‚úÖ Git installed successfully"
          else
            echo "‚úÖ Git already installed"
          fi

          # Install OpenTelemetry Collector if not already installed
          if ! command -v otelcol &> /dev/null; then
            echo "üìä Installing OpenTelemetry Collector..."
            sudo apt-get update
            sudo apt-get -y install wget
            wget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.127.0/otelcol_0.127.0_linux_amd64.deb
            sudo dpkg -i otelcol_0.127.0_linux_amd64.deb
            
            # Configure OpenTelemetry Collector
            echo "‚öôÔ∏è  Configuring OpenTelemetry Collector..."
            sudo tee /etc/otelcol/config.yaml > /dev/null <<EOF
          receivers:
            hostmetrics:
              collection_interval: 15s
              scrapers:
                cpu:
                memory:
                disk:
                filesystem:
                load:
                network:
                processes:

          exporters:
            prometheus:
              endpoint: "0.0.0.0:8889"

          service:
            pipelines:
              metrics:
                receivers: [hostmetrics]
                exporters: [prometheus]
          EOF
            
            # Enable and start the service
            sudo systemctl enable otelcol
            sudo systemctl restart otelcol
            
            # Clean up downloaded package
            rm -f otelcol_0.127.0_linux_amd64.deb
            
            echo "‚úÖ OpenTelemetry Collector installed and configured successfully"
          else
            echo "‚úÖ OpenTelemetry Collector already installed"
            # Ensure it's running with the correct config
            sudo systemctl restart otelcol
          fi
          
          # Verify OpenTelemetry Collector status
          echo "üîç Checking OpenTelemetry Collector status..."
          sudo systemctl status otelcol --no-pager || echo "‚ö†Ô∏è  OTC status check failed, but continuing..."

  deploy:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Dev EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script: |
          # Clone repository if it doesn't exist, otherwise pull latest changes
          if [ ! -d "/home/ubuntu/YoloService" ]; then
            echo "üì• Cloning repository..."
            cd /home/ubuntu
            git clone ${{ github.server_url }}/${{ github.repository }}.git YoloService
          else
            echo "üì• Updating repository..."
            cd /home/ubuntu/YoloService
            # Pull latest changes from the pushed branch
            git fetch --all
            git checkout ${{ github.head_ref || github.ref_name }}
            git pull origin ${{ github.head_ref || github.ref_name }}
          fi
          
          cd /home/ubuntu/YoloService
          
          # Run deployment script
          chmod +x deploy.sh
          ./deploy.sh
          
          # Verify deployment
          sleep 10
          curl -f http://localhost:8667/health || exit 1
          echo "üöÄ Development deployment successful!"
          
          # Verify OpenTelemetry Collector metrics endpoint
          echo "üìä Verifying OpenTelemetry Collector metrics endpoint..."
          curl -f http://localhost:8889/metrics > /dev/null && echo "‚úÖ OTC metrics endpoint is accessible" || echo "‚ö†Ô∏è  OTC metrics endpoint not accessible"